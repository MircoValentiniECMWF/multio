/*
 * (C) Copyright 1996- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 * In applying this licence, ECMWF does not waive the privileges and immunities
 * granted to it by virtue of its status as an intergovernmental organisation nor
 * does it submit to any jurisdiction.
 */

/// @author Tiago Quintino
/// @date Dec 2015


#ifndef multio_MultIO_H
#define multio_MultIO_H

#include <iosfwd>
#include <string>
#include <vector>

#include "eckit/io/Length.h"
#include "eckit/log/Timer.h"
#include "eckit/memory/NonCopyable.h"
#include "eckit/memory/SharedPtr.h"

#include "multio/DataSink.h"
#include "multio/IOStats.h"
#include "multio/JournalRecord.h"
#include "multio/Trigger.h"

namespace multio {

//----------------------------------------------------------------------------------------------------------------------

class MultIO final : public DataSink {
public:
    MultIO(const eckit::Configuration& config);

    ~MultIO() override;

    bool ready() const override;

    /// Return the value that is serialised to produce the json() in the journal.
    /// For a MultIO, this ensures that the sub-sink configs are generated by the sub sinks
    /// rather than just using the passed configuration directly
    eckit::Value configValue() const override;

    void write(eckit::DataBlobPtr blob) override;

    void flush() override;

    void trigger(const eckit::StringDict& metadata) const;

    void replayRecord(const JournalRecord& record);

    void report(std::ostream&);

    void commitJournal();

    ///
    /// LEGACY INTERFACE TO REMOVE AFTER IFS CHANGED TO SIMPLE WRITE() INTERFACE
    ///

    void iopenfdb(const std::string& name, int& fdbaddr, const std::string& mode) override;
    void iinitfdb() override;
    void iclosefdb(int fdbaddr) override;

    void isetcommfdb(int rank) override;
    void isetrankfdb(int fdbaddr, int rank) override;
    void iset_fdb_root(int fdbaddr, const std::string& name) override;

    void iflushfdb(int fdbaddr) override;

    void isetfieldcountfdb(int fdbaddr, int all_ranks, int this_rank) override;
    void isetvalfdb(int fdbaddr, const std::string& name, const std::string& value) override;

    // virtual int ireadfdb(void *data, int *words);
    void iwritefdb(int fdbaddr, eckit::DataBlobPtr blob) override;

protected:  // types
    struct SinkStoreElem {
        eckit::SharedPtr<DataSink> sink_;
        bool journalAlways_;
    };

protected:
    void print(std::ostream&) const override;

protected:  // members

    Journal journal_;
    IOStats stats_;

    std::vector<SinkStoreElem> sinks_;

    Trigger trigger_;

    mutable eckit::Mutex mutex_;

    eckit::Timer timer_;

    bool journaled_;

private:  // methods
    friend std::ostream& operator<<(std::ostream& s, const MultIO& p) {
        p.print(s);
        return s;
    }
};

//----------------------------------------------------------------------------------------------------------------------

}  // namespace multio

#endif
