!>
!> @file grib2_level_configurator_factory_mod.F90
!>
!> @brief Module containing the factory function for creating or initializing GRIB2 Level Configurator objects.
!>
!> The `GRIB2_LEVEL_CONFIGURATOR_FACTORY_MOD` provides a factory function that creates or initializes
!> instances of GRIB2 Level Configurator objects. The function relies on various data structures and
!> types defined within the model's core and data types modules, as well as a YAML configuration
!> for initializing the section's leveleters. Debugging, logging, and tracing features are enabled
!> via preprocessor directives to allow additional output when needed.
!>
!> @section local dependencies
!>   - @dependency [PARAMETER] OM_CORE_MOD::JPIB_K
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_000_MOD::GRIB2_LEVEL_CONFIGURATOR_000_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_001_MOD::GRIB2_LEVEL_CONFIGURATOR_001_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_002_MOD::GRIB2_LEVEL_CONFIGURATOR_002_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_003_MOD::GRIB2_LEVEL_CONFIGURATOR_003_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_004_MOD::GRIB2_LEVEL_CONFIGURATOR_004_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_005_MOD::GRIB2_LEVEL_CONFIGURATOR_005_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_006_MOD::GRIB2_LEVEL_CONFIGURATOR_006_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_007_MOD::GRIB2_LEVEL_CONFIGURATOR_007_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_008_MOD::GRIB2_LEVEL_CONFIGURATOR_008_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_009_MOD::GRIB2_LEVEL_CONFIGURATOR_009_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_010_MOD::GRIB2_LEVEL_CONFIGURATOR_010_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_011_MOD::GRIB2_LEVEL_CONFIGURATOR_011_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_012_MOD::GRIB2_LEVEL_CONFIGURATOR_012_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_013_MOD::GRIB2_LEVEL_CONFIGURATOR_013_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_014_MOD::GRIB2_LEVEL_CONFIGURATOR_014_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_015_MOD::GRIB2_LEVEL_CONFIGURATOR_015_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_016_MOD::GRIB2_LEVEL_CONFIGURATOR_016_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_017_MOD::GRIB2_LEVEL_CONFIGURATOR_017_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_018_MOD::GRIB2_LEVEL_CONFIGURATOR_018_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_019_MOD::GRIB2_LEVEL_CONFIGURATOR_019_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_020_MOD::GRIB2_LEVEL_CONFIGURATOR_020_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_021_MOD::GRIB2_LEVEL_CONFIGURATOR_021_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_022_MOD::GRIB2_LEVEL_CONFIGURATOR_022_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_023_MOD::GRIB2_LEVEL_CONFIGURATOR_023_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_024_MOD::GRIB2_LEVEL_CONFIGURATOR_024_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_025_MOD::GRIB2_LEVEL_CONFIGURATOR_025_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_026_MOD::GRIB2_LEVEL_CONFIGURATOR_026_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_027_MOD::GRIB2_LEVEL_CONFIGURATOR_027_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_028_MOD::GRIB2_LEVEL_CONFIGURATOR_028_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_029_MOD::GRIB2_LEVEL_CONFIGURATOR_029_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_030_MOD::GRIB2_LEVEL_CONFIGURATOR_030_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_031_MOD::GRIB2_LEVEL_CONFIGURATOR_031_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_032_MOD::GRIB2_LEVEL_CONFIGURATOR_032_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_033_MOD::GRIB2_LEVEL_CONFIGURATOR_033_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_034_MOD::GRIB2_LEVEL_CONFIGURATOR_034_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_035_MOD::GRIB2_LEVEL_CONFIGURATOR_035_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_036_MOD::GRIB2_LEVEL_CONFIGURATOR_036_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_037_MOD::GRIB2_LEVEL_CONFIGURATOR_037_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_038_MOD::GRIB2_LEVEL_CONFIGURATOR_038_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_039_MOD::GRIB2_LEVEL_CONFIGURATOR_039_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_040_MOD::GRIB2_LEVEL_CONFIGURATOR_040_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_041_MOD::GRIB2_LEVEL_CONFIGURATOR_041_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_042_MOD::GRIB2_LEVEL_CONFIGURATOR_042_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_043_MOD::GRIB2_LEVEL_CONFIGURATOR_043_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_044_MOD::GRIB2_LEVEL_CONFIGURATOR_044_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_045_MOD::GRIB2_LEVEL_CONFIGURATOR_045_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_046_MOD::GRIB2_LEVEL_CONFIGURATOR_046_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_047_MOD::GRIB2_LEVEL_CONFIGURATOR_047_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_048_MOD::GRIB2_LEVEL_CONFIGURATOR_048_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_049_MOD::GRIB2_LEVEL_CONFIGURATOR_049_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_050_MOD::GRIB2_LEVEL_CONFIGURATOR_050_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_051_MOD::GRIB2_LEVEL_CONFIGURATOR_051_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_052_MOD::GRIB2_LEVEL_CONFIGURATOR_052_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_053_MOD::GRIB2_LEVEL_CONFIGURATOR_053_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_054_MOD::GRIB2_LEVEL_CONFIGURATOR_054_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_055_MOD::GRIB2_LEVEL_CONFIGURATOR_055_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_056_MOD::GRIB2_LEVEL_CONFIGURATOR_056_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_057_MOD::GRIB2_LEVEL_CONFIGURATOR_057_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_058_MOD::GRIB2_LEVEL_CONFIGURATOR_058_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_059_MOD::GRIB2_LEVEL_CONFIGURATOR_059_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_060_MOD::GRIB2_LEVEL_CONFIGURATOR_060_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_061_MOD::GRIB2_LEVEL_CONFIGURATOR_061_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_062_MOD::GRIB2_LEVEL_CONFIGURATOR_062_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_063_MOD::GRIB2_LEVEL_CONFIGURATOR_063_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_064_MOD::GRIB2_LEVEL_CONFIGURATOR_064_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_065_MOD::GRIB2_LEVEL_CONFIGURATOR_065_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_066_MOD::GRIB2_LEVEL_CONFIGURATOR_066_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_067_MOD::GRIB2_LEVEL_CONFIGURATOR_067_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_068_MOD::GRIB2_LEVEL_CONFIGURATOR_068_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_069_MOD::GRIB2_LEVEL_CONFIGURATOR_069_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_070_MOD::GRIB2_LEVEL_CONFIGURATOR_070_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_071_MOD::GRIB2_LEVEL_CONFIGURATOR_071_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_072_MOD::GRIB2_LEVEL_CONFIGURATOR_072_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_073_MOD::GRIB2_LEVEL_CONFIGURATOR_073_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_074_MOD::GRIB2_LEVEL_CONFIGURATOR_074_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_075_MOD::GRIB2_LEVEL_CONFIGURATOR_075_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_076_MOD::GRIB2_LEVEL_CONFIGURATOR_076_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_077_MOD::GRIB2_LEVEL_CONFIGURATOR_077_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_078_MOD::GRIB2_LEVEL_CONFIGURATOR_078_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_079_MOD::GRIB2_LEVEL_CONFIGURATOR_079_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_080_MOD::GRIB2_LEVEL_CONFIGURATOR_080_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_081_MOD::GRIB2_LEVEL_CONFIGURATOR_081_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_082_MOD::GRIB2_LEVEL_CONFIGURATOR_082_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_083_MOD::GRIB2_LEVEL_CONFIGURATOR_083_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_084_MOD::GRIB2_LEVEL_CONFIGURATOR_084_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_085_MOD::GRIB2_LEVEL_CONFIGURATOR_085_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_086_MOD::GRIB2_LEVEL_CONFIGURATOR_086_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_087_MOD::GRIB2_LEVEL_CONFIGURATOR_087_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_999_MOD::GRIB2_LEVEL_CONFIGURATOR_999_T
!>   - @dependency [TYPE] YAML_CORE_UTILS_MOD::YAML_CONFIGURATION_T
!>   - @dependency [TYPE] OM_DATA_TYPES_MOD::MODEL_PAR_T
!>
!> @section special dependencies
!>   - @dependency [*] PP_DEBUG_USE_VARS::*
!>   - @dependency [*] PP_LOG_USE_VARS::*
!>   - @dependency [*] PP_TRACE_USE_VARS::*
!>
!> @author Mirco Valentini
!> @date   August, 2024
!>

! Include preprocessor utils
#include "output_manager_preprocessor_utils.h"
#include "output_manager_preprocessor_trace_utils.h"
#include "output_manager_preprocessor_logging_utils.h"
#include "output_manager_preprocessor_errhdl_utils.h"


#define PP_FILE_NAME 'grib2_level_configurator_factory_mod.F90'
#define PP_SECTION_TYPE 'MODULE'
#define PP_SECTION_NAME 'GRIB2_LEVEL_CONFIGURATOR_FACTORY_MOD'
MODULE GRIB2_LEVEL_CONFIGURATOR_FACTORY_MOD

IMPLICIT NONE

!>
!> Default symbols visibility
PRIVATE

!>
!> Key to be used to recover the level_configurator number from the YAML configuration.
CHARACTER(LEN=*), PARAMETER :: LEVEL_CONFIGURATOR_KEY='type'

!>
!> Public symbols (dataTypes)
PUBLIC :: MAKE_GRIB2_LEVEL_CONFIGURATOR
PUBLIC :: DESTROY_GRIB2_LEVEL_CONFIGURATOR
PUBLIC :: READ_GRIB2_LEVEL_CONFIGURATOR_TYPE

CONTAINS

!>
!> @brief Factory function for creating or initializing GRIB2 Level Configurator objects.
!>
!> This function acts as a factory for creating or initializing a GRIB2 Level Configurator object
!> based on the provided leveleters. It assigns the proper type (`GRIB2_LEVEL_CONFIGURATOR_000_T`)
!> to the `GRIB2_LEVEL_CONFIGURATOR` object and configures it using the provided model leveleters,
!> ID, and YAML configuration. If verbose mode is enabled, additional debug information
!> is output during the process.
!>
!> @level [inout] GRIB2_LEVEL_CONFIGURATOR The GRIB2 Level Configurator object that will be created or initialized.
!>                              It must be a pointer of type `GRIB_SECTION_BASE_A`.
!> @level [in] ID Integer identifier for the GRIB2 Level Configurator object.
!> @level [in] LEVELS The model leveleters structure of type `MODEL_PAR_T`.
!> @level [in] CFG YAML configuration object used to configure the GRIB2 Level Configurator object.
!> @level [inout] HOOKS Utilities to be used for logging, debugging, tracing and option handling
!>
!> @return Integer error code (`RET`) indicating success or failure of the operation.
!>         Possible values:
!>           - `0`: Success
!>           - `1`: Failure
!>
!> @section Section that can be constructed with this factory
!>   - `GRIB2_LEVEL_CONFIGURATOR_000_T`
!>
!> @section Dependencies of this function:
!>
!> @subsection local dependencies
!>   - @dependency [PARAMETER] OM_CORE_MOD::JPIB_K
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_000_MOD::GRIB2_LEVEL_CONFIGURATOR_000_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_001_MOD::GRIB2_LEVEL_CONFIGURATOR_001_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_002_MOD::GRIB2_LEVEL_CONFIGURATOR_002_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_003_MOD::GRIB2_LEVEL_CONFIGURATOR_003_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_004_MOD::GRIB2_LEVEL_CONFIGURATOR_004_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_005_MOD::GRIB2_LEVEL_CONFIGURATOR_005_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_006_MOD::GRIB2_LEVEL_CONFIGURATOR_006_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_007_MOD::GRIB2_LEVEL_CONFIGURATOR_007_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_008_MOD::GRIB2_LEVEL_CONFIGURATOR_008_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_009_MOD::GRIB2_LEVEL_CONFIGURATOR_009_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_010_MOD::GRIB2_LEVEL_CONFIGURATOR_010_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_011_MOD::GRIB2_LEVEL_CONFIGURATOR_011_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_012_MOD::GRIB2_LEVEL_CONFIGURATOR_012_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_013_MOD::GRIB2_LEVEL_CONFIGURATOR_013_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_014_MOD::GRIB2_LEVEL_CONFIGURATOR_014_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_015_MOD::GRIB2_LEVEL_CONFIGURATOR_015_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_016_MOD::GRIB2_LEVEL_CONFIGURATOR_016_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_017_MOD::GRIB2_LEVEL_CONFIGURATOR_017_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_018_MOD::GRIB2_LEVEL_CONFIGURATOR_018_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_019_MOD::GRIB2_LEVEL_CONFIGURATOR_019_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_020_MOD::GRIB2_LEVEL_CONFIGURATOR_020_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_021_MOD::GRIB2_LEVEL_CONFIGURATOR_021_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_022_MOD::GRIB2_LEVEL_CONFIGURATOR_022_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_023_MOD::GRIB2_LEVEL_CONFIGURATOR_023_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_024_MOD::GRIB2_LEVEL_CONFIGURATOR_024_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_025_MOD::GRIB2_LEVEL_CONFIGURATOR_025_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_026_MOD::GRIB2_LEVEL_CONFIGURATOR_026_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_027_MOD::GRIB2_LEVEL_CONFIGURATOR_027_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_028_MOD::GRIB2_LEVEL_CONFIGURATOR_028_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_029_MOD::GRIB2_LEVEL_CONFIGURATOR_029_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_030_MOD::GRIB2_LEVEL_CONFIGURATOR_030_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_031_MOD::GRIB2_LEVEL_CONFIGURATOR_031_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_032_MOD::GRIB2_LEVEL_CONFIGURATOR_032_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_033_MOD::GRIB2_LEVEL_CONFIGURATOR_033_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_034_MOD::GRIB2_LEVEL_CONFIGURATOR_034_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_035_MOD::GRIB2_LEVEL_CONFIGURATOR_035_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_036_MOD::GRIB2_LEVEL_CONFIGURATOR_036_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_037_MOD::GRIB2_LEVEL_CONFIGURATOR_037_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_038_MOD::GRIB2_LEVEL_CONFIGURATOR_038_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_039_MOD::GRIB2_LEVEL_CONFIGURATOR_039_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_040_MOD::GRIB2_LEVEL_CONFIGURATOR_040_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_041_MOD::GRIB2_LEVEL_CONFIGURATOR_041_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_042_MOD::GRIB2_LEVEL_CONFIGURATOR_042_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_043_MOD::GRIB2_LEVEL_CONFIGURATOR_043_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_044_MOD::GRIB2_LEVEL_CONFIGURATOR_044_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_045_MOD::GRIB2_LEVEL_CONFIGURATOR_045_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_046_MOD::GRIB2_LEVEL_CONFIGURATOR_046_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_047_MOD::GRIB2_LEVEL_CONFIGURATOR_047_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_048_MOD::GRIB2_LEVEL_CONFIGURATOR_048_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_049_MOD::GRIB2_LEVEL_CONFIGURATOR_049_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_050_MOD::GRIB2_LEVEL_CONFIGURATOR_050_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_051_MOD::GRIB2_LEVEL_CONFIGURATOR_051_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_052_MOD::GRIB2_LEVEL_CONFIGURATOR_052_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_053_MOD::GRIB2_LEVEL_CONFIGURATOR_053_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_054_MOD::GRIB2_LEVEL_CONFIGURATOR_054_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_055_MOD::GRIB2_LEVEL_CONFIGURATOR_055_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_056_MOD::GRIB2_LEVEL_CONFIGURATOR_056_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_057_MOD::GRIB2_LEVEL_CONFIGURATOR_057_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_058_MOD::GRIB2_LEVEL_CONFIGURATOR_058_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_059_MOD::GRIB2_LEVEL_CONFIGURATOR_059_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_060_MOD::GRIB2_LEVEL_CONFIGURATOR_060_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_061_MOD::GRIB2_LEVEL_CONFIGURATOR_061_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_062_MOD::GRIB2_LEVEL_CONFIGURATOR_062_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_063_MOD::GRIB2_LEVEL_CONFIGURATOR_063_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_064_MOD::GRIB2_LEVEL_CONFIGURATOR_064_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_065_MOD::GRIB2_LEVEL_CONFIGURATOR_065_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_066_MOD::GRIB2_LEVEL_CONFIGURATOR_066_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_067_MOD::GRIB2_LEVEL_CONFIGURATOR_067_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_068_MOD::GRIB2_LEVEL_CONFIGURATOR_068_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_069_MOD::GRIB2_LEVEL_CONFIGURATOR_069_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_070_MOD::GRIB2_LEVEL_CONFIGURATOR_070_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_071_MOD::GRIB2_LEVEL_CONFIGURATOR_071_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_072_MOD::GRIB2_LEVEL_CONFIGURATOR_072_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_073_MOD::GRIB2_LEVEL_CONFIGURATOR_073_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_074_MOD::GRIB2_LEVEL_CONFIGURATOR_074_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_075_MOD::GRIB2_LEVEL_CONFIGURATOR_075_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_076_MOD::GRIB2_LEVEL_CONFIGURATOR_076_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_077_MOD::GRIB2_LEVEL_CONFIGURATOR_077_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_078_MOD::GRIB2_LEVEL_CONFIGURATOR_078_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_079_MOD::GRIB2_LEVEL_CONFIGURATOR_079_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_080_MOD::GRIB2_LEVEL_CONFIGURATOR_080_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_081_MOD::GRIB2_LEVEL_CONFIGURATOR_081_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_082_MOD::GRIB2_LEVEL_CONFIGURATOR_082_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_083_MOD::GRIB2_LEVEL_CONFIGURATOR_083_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_084_MOD::GRIB2_LEVEL_CONFIGURATOR_084_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_085_MOD::GRIB2_LEVEL_CONFIGURATOR_085_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_086_MOD::GRIB2_LEVEL_CONFIGURATOR_086_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_087_MOD::GRIB2_LEVEL_CONFIGURATOR_087_T
!>   - @dependency [TYPE] GRIB2_LEVEL_CONFIGURATOR_999_MOD::GRIB2_LEVEL_CONFIGURATOR_999_T
!>   - @dependency [TYPE] YAML_CORE_UTILS_MOD::YAML_CONFIGURATION_T
!>   - @dependency [TYPE] OM_DATA_TYPES_MOD::MODEL_PAR_T
!>
!> @subsection special dependencies
!>   - @dependency [*] PP_DEBUG_USE_VARS::*
!>   - @dependency [*] PP_LOG_USE_VARS::*
!>   - @dependency [*] PP_TRACE_USE_VARS::*
!>
!> @see GRIB2_LEVEL_CONFIGURATOR_000_T
!>
#define PP_PROCEDURE_TYPE 'FUNCTION'
#define PP_PROCEDURE_NAME 'MAKE_GRIB2_LEVEL_CONFIGURATOR'
PP_THREAD_SAFE FUNCTION MAKE_GRIB2_LEVEL_CONFIGURATOR( GRIB2_LEVEL_CONFIGURATOR, ID, PAR, &
&               CFG, OPT, HOOKS ) RESULT(RET)

  !> Symbols imported from other modules within the project.
  USE :: DATAKINDS_DEF_MOD,                ONLY: JPIB_K
  USE :: GRIB_SECTION_BASE_MOD,            ONLY: GRIB_SECTION_BASE_A
  USE :: GRIB2_LEVEL_CONFIGURATOR_000_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_000_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_001_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_001_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_002_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_002_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_003_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_003_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_004_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_004_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_005_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_005_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_006_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_006_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_007_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_007_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_008_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_008_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_009_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_009_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_010_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_010_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_011_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_011_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_012_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_012_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_013_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_013_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_014_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_014_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_015_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_015_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_016_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_016_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_017_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_017_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_018_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_018_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_019_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_019_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_020_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_020_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_021_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_021_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_022_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_022_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_023_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_023_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_024_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_024_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_025_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_025_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_026_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_026_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_027_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_027_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_028_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_028_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_029_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_029_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_030_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_030_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_031_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_031_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_032_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_032_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_033_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_033_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_034_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_034_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_035_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_035_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_036_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_036_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_037_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_037_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_038_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_038_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_039_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_039_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_040_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_040_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_041_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_041_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_042_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_042_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_043_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_043_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_044_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_044_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_045_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_045_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_046_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_046_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_047_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_047_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_048_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_048_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_049_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_049_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_050_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_050_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_051_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_051_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_052_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_052_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_053_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_053_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_054_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_054_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_055_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_055_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_056_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_056_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_057_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_057_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_058_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_058_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_059_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_059_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_060_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_060_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_061_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_061_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_062_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_062_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_063_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_063_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_064_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_064_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_065_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_065_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_066_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_066_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_067_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_067_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_068_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_068_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_069_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_069_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_070_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_070_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_071_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_071_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_072_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_072_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_073_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_073_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_074_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_074_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_075_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_075_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_076_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_076_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_077_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_077_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_078_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_078_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_079_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_079_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_080_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_080_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_081_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_081_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_082_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_082_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_083_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_083_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_084_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_084_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_085_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_085_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_086_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_086_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_087_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_087_T
  USE :: GRIB2_LEVEL_CONFIGURATOR_999_MOD, ONLY: GRIB2_LEVEL_CONFIGURATOR_999_T
  USE :: YAML_CORE_UTILS_MOD,              ONLY: YAML_CONFIGURATION_T
  USE :: GRIB_ENCODER_OPTIONS_MOD,         ONLY: GRIB_ENCODER_OPTIONS_T
  USE :: PARAMETRIZATION_MOD,              ONLY: PARAMETRIZATION_T
  USE :: HOOKS_MOD,                        ONLY: HOOKS_T

  ! Symbols imported by the preprocessor for debugging purposes
  PP_DEBUG_USE_VARS

  ! Symbols imported by the preprocessor for logging purposes
  PP_LOG_USE_VARS

  ! Symbols imported by the preprocessor for tracing purposes
  PP_TRACE_USE_VARS

IMPLICIT NONE

  ! Dummy arguments
  CLASS(GRIB_SECTION_BASE_A), POINTER, INTENT(INOUT) :: GRIB2_LEVEL_CONFIGURATOR
  INTEGER(KIND=JPIB_K),                INTENT(IN)    :: ID
  TYPE(PARAMETRIZATION_T),             INTENT(IN)    :: PAR
  TYPE(YAML_CONFIGURATION_T),          INTENT(IN)    :: CFG
  TYPE(GRIB_ENCODER_OPTIONS_T),        INTENT(IN)    :: OPT
  TYPE(HOOKS_T),                       INTENT(INOUT) :: HOOKS

  !> Function result
  INTEGER(KIND=JPIB_K) :: RET

  ! Local variables
  INTEGER(KIND=JPIB_K) :: ALLOC_STATUS
  CHARACTER(LEN=:), ALLOCATABLE :: ERRMSG

   ! Local error codes
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_UNKNOWN_SECTION_0=1_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_ALLOCATION_ERROR=2_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_INITIALIZATION_ERROR=3_JPIB_K

  ! Local variables declared by the preprocessor for debugging purposes
  PP_DEBUG_DECL_VARS

  ! Local variables declared by the preprocessor for logging purposes
  PP_LOG_DECL_VARS

  ! Local variables declared by the preprocessor for tracing purposes
  PP_TRACE_DECL_VARS

  ! Trace begin of procedure
  PP_TRACE_ENTER_PROCEDURE()

  ! Initialization of good path return value
  PP_SET_ERR_SUCCESS( RET )

  ! Initialize the section
  SELECT CASE( ID )

  CASE (0)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_000_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (1)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_001_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (2)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_002_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (3)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_003_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (4)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_004_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (5)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_005_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (6)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_006_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (7)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_007_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (8)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_008_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (9)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_009_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (10)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_010_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (11)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_011_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (12)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_012_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (13)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_013_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (14)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_014_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (15)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_015_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (16)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_016_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (17)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_017_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (18)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_018_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (19)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_019_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (20)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_020_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (21)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_021_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (22)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_022_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (23)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_023_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (24)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_024_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (25)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_025_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (26)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_026_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (27)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_027_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (28)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_028_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (29)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_029_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (30)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_030_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (31)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_031_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (32)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_032_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (33)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_033_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (34)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_034_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (35)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_035_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (36)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_036_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (37)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_037_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (38)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_038_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (39)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_039_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (40)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_040_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (41)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_041_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (42)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_042_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (43)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_043_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (44)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_044_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (45)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_045_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (46)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_046_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (47)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_047_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (48)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_048_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (49)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_049_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (50)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_050_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (51)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_051_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (52)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_052_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (53)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_053_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (54)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_054_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (55)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_055_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (56)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_056_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (57)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_057_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (58)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_058_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (59)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_059_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (60)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_060_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (61)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_061_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (62)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_062_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (63)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_063_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (64)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_064_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (65)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_065_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (66)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_066_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (67)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_067_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (68)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_068_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (69)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_069_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (70)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_070_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (71)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_071_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (72)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_072_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (73)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_073_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (74)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_074_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (75)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_075_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (76)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_076_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (77)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_077_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (78)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_078_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (79)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_079_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (80)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_080_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (81)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_081_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (82)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_082_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (83)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_083_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (84)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_084_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (85)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_085_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (86)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_086_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (87)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_087_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE (999)

    ALLOCATE( GRIB2_LEVEL_CONFIGURATOR_999_T::GRIB2_LEVEL_CONFIGURATOR, STAT=ALLOC_STATUS, ERRMSG=ERRMSG )
    PP_DEBUG_CRITICAL_COND_THROW( ALLOC_STATUS.NE.0, ERRFLAG_ALLOCATION_ERROR )

  CASE DEFAULT

    PP_DEBUG_CRITICAL_THROW( ERRFLAG_UNKNOWN_SECTION_0 )

  END SELECT

  !> Initialization of the section
  PP_TRYCALL(ERRFLAG_INITIALIZATION_ERROR)  GRIB2_LEVEL_CONFIGURATOR%INIT( PAR, CFG, OPT, HOOKS )

  ! Trace end of procedure (on success)
  PP_TRACE_EXIT_PROCEDURE_ON_SUCCESS()

  ! Exit point (On success)
  RETURN

! Error handler
PP_ERROR_HANDLER

  ! Initialization of bad path return value
  PP_SET_ERR_FAILURE( RET )

#if defined( PP_DEBUG_ENABLE_ERROR_HANDLING )
!$omp critical(ERROR_HANDLER)

  BLOCK

    ! Error handling variables
    CHARACTER(LEN=:), ALLOCATABLE :: STR
    CHARACTER(LEN=32) :: TMP

    TMP = REPEAT(' ', 32)
    WRITE(TMP,'(I32)')  ID

    ! Handle different errors
    SELECT CASE(ERRIDX)
    CASE (ERRFLAG_UNKNOWN_SECTION_0)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Unknown level_configurator number: '//TRIM(ADJUSTL(TMP)) )
    CASE (ERRFLAG_ALLOCATION_ERROR)
      IF ( .NOT.ALLOCATED(ERRMSG) ) THEN
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error allocating level_configurator number: '//TRIM(ADJUSTL(TMP)) )
      ELSE
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error allocating level_configurator number: '//TRIM(ADJUSTL(TMP))//' : '//TRIM(ADJUSTL(ERRMSG)) )
        DEALLOCATE(ERRMSG)
      ENDIF
    CASE (ERRFLAG_INITIALIZATION_ERROR)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'error initializing level_configurator number: '//TRIM(ADJUSTL(TMP)) )
    CASE DEFAULT
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'unhandled error' )
    END SELECT

    ! Trace end of procedure (on error)
    PP_TRACE_EXIT_PROCEDURE_ON_ERROR()

    ! Write the error message and stop the program
    PP_DEBUG_ABORT( STR )

  END BLOCK

!$omp end critical(ERROR_HANDLER)
#endif

  ! Exit point (on error)
  RETURN

END FUNCTION MAKE_GRIB2_LEVEL_CONFIGURATOR
#undef PP_PROCEDURE_NAME
#undef PP_PROCEDURE_TYPE


!>
!> @brief Destroys a GRIB2 Level Configurator structure.
!>
!> This function takes a GRIB2 Level Configurator object (`GRIB2_LEVEL_CONFIGURATOR`) and performs
!> the necessary cleanup, freeing any associated resources. It also supports a
!> `VERBOSE` mode for detailed output during the destruction process.
!>
!> @section interface
!> @level[in,out] GRIB2_LEVEL_CONFIGURATOR The GRIB2 Level Configurator object to be destroyed.
!>                              The structure is modified in place.
!> @level [inout] HOOKS Utilities to be used for logging, debugging, tracing and option handling
!>
!> @return Integer error code (`RET`) indicating success or failure of the operation.
!>         Possible values:
!>           - `0`: Success
!>           - `1`: Failure
!>
!> @section Dependencies of this function:
!>
!> @subsection module dependencies
!>   - @dependency [PARAMETER] OM_CORE_MOD::JPIB_K
!>
!> @subsection special dependencies
!>   - @dependency [*] PP_DEBUG_USE_VARS::*
!>   - @dependency [*] PP_LOG_USE_VARS::*
!>   - @dependency [*] PP_TRACE_USE_VARS::*
!>
!> @see MAKE_GRIB2_LEVEL_CONFIGURATOR
!>
#define PP_PROCEDURE_TYPE 'FUNCTION'
#define PP_PROCEDURE_NAME 'DESTROY_GRIB2_LEVEL_CONFIGURATOR'
PP_THREAD_SAFE FUNCTION DESTROY_GRIB2_LEVEL_CONFIGURATOR( GRIB2_LEVEL_CONFIGURATOR, HOOKS ) RESULT(RET)

  !> Symbols imported from other modules within the project.
  USE :: GRIB_SECTION_BASE_MOD, ONLY: GRIB_SECTION_BASE_A
  USE :: DATAKINDS_DEF_MOD,     ONLY: JPIB_K
  USE :: HOOKS_MOD,             ONLY: HOOKS_T

  ! Symbols imported by the preprocessor for debugging purposes
  PP_DEBUG_USE_VARS

  ! Symbols imported by the preprocessor for logging purposes
  PP_LOG_USE_VARS

  ! Symbols imported by the preprocessor for tracing purposes
  PP_TRACE_USE_VARS

IMPLICIT NONE

  ! Dummy arguments
  CLASS(GRIB_SECTION_BASE_A), POINTER, INTENT(INOUT) :: GRIB2_LEVEL_CONFIGURATOR
  TYPE(HOOKS_T),                       INTENT(INOUT) :: HOOKS

  !> Function result
  INTEGER(KIND=JPIB_K) :: RET

  ! Local variables
  INTEGER(KIND=JPIB_K) :: DEALLOC_STATUS
  CHARACTER(LEN=:), ALLOCATABLE :: ERRMSG

  ! Local error codes
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_DEALLOCATION_ERROR=2_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_FREE_ERROR=3_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_NOT_ASSOCIATED=1_JPIB_K

  ! Local variables declared by the preprocessor for debugging purposes
  PP_DEBUG_DECL_VARS

  ! Local variables declared by the preprocessor for logging purposes
  PP_LOG_DECL_VARS

  ! Local variables declared by the preprocessor for tracing purposes
  PP_TRACE_DECL_VARS

  ! Trace begin of procedure
  PP_TRACE_ENTER_PROCEDURE()

  ! Initialization of good path return value
  PP_SET_ERR_SUCCESS( RET )

  ! Check if the section is associated
  PP_DEBUG_CRITICAL_COND_THROW( .NOT.ASSOCIATED(GRIB2_LEVEL_CONFIGURATOR), ERRFLAG_NOT_ASSOCIATED )

  !> Free the section
  PP_TRYCALL(ERRFLAG_FREE_ERROR)  GRIB2_LEVEL_CONFIGURATOR%FREE( HOOKS )

  ! Initialize the section
  DEALLOCATE( GRIB2_LEVEL_CONFIGURATOR, STAT=DEALLOC_STATUS, ERRMSG=ERRMSG )
  PP_DEBUG_CRITICAL_COND_THROW( DEALLOC_STATUS.NE.0, ERRFLAG_DEALLOCATION_ERROR )

  ! Trace end of procedure (on success)
  PP_TRACE_EXIT_PROCEDURE_ON_SUCCESS()

  ! Exit point (on success)
  RETURN

! Error handler
PP_ERROR_HANDLER

  ! Initialization of bad path return value
  PP_SET_ERR_FAILURE( RET )

#if defined( PP_DEBUG_ENABLE_ERROR_HANDLING )
!$omp critical(ERROR_HANDLER)

  BLOCK

    ! Error handling variables
    CHARACTER(LEN=:), ALLOCATABLE :: STR

    ! Handle different errors
    SELECT CASE(ERRIDX)
    CASE (ERRFLAG_NOT_ASSOCIATED)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'level_configurator to destroy is not associated' )
    CASE (ERRFLAG_DALLOCATION_ERROR)
      IF ( .NOT.ALLOCATED(ERRMSG) ) THEN
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error deallocating level_configurator number' )
      ELSE
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error deallocating level_configurator number: '//TRIM(ADJUSTL(ERRMSG)) )
        DEALLOCATE(ERRMSG)
      ENDIF
    CASE (ERRFLAG_FREE_ERROR)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'error destructing level_configurator' )
    CASE DEFAULT
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'unhandled error' )
    END SELECT

    ! Trace end of procedure (on error)
    PP_TRACE_EXIT_PROCEDURE_ON_ERROR()

    ! Write the error message and stop the program
    PP_DEBUG_ABORT( STR )

  END BLOCK

!$omp end critical(ERROR_HANDLER)
#endif

  ! Exit point (on error)
  RETURN

END FUNCTION DESTROY_GRIB2_LEVEL_CONFIGURATOR
#undef PP_PROCEDURE_NAME
#undef PP_PROCEDURE_TYPE


!>
!> @brief Read from the YAML configuration the type of the GRIB2 Level Configurator object.
!>
!> @section interface
!> @level [in]     CFG             YAML configuration object used to configure the GRIB2 Level Configurator object.
!> @level [out]    LEVEL_CONFIGURATOR_TYPE   Identifier of the level_configurator type read from the configuration.
!> @level [in,out] HOOKS Utilities to be used for logging, debugging, tracing and option handling
!>
!> @return Integer error code (`RET`) indicating success or failure of the operation.
!>         Possible values:
!>           - `0`: Success
!>           - `1`: Failure
!>
!> @section Dependencies of this function:
!>
!> @subsection module dependencies
!>   - @dependency [PARAMETER] OM_CORE_MOD::JPIB_K
!>
!> @subsection special dependencies
!>   - @dependency [*] PP_DEBUG_USE_VARS::*
!>   - @dependency [*] PP_LOG_USE_VARS::*
!>   - @dependency [*] PP_TRACE_USE_VARS::*
!>
!> @see MAKE_GRIB2_LEVEL_CONFIGURATOR
!>
#define PP_PROCEDURE_TYPE 'FUNCTION'
#define PP_PROCEDURE_NAME 'READ_GRIB2_LEVEL_CONFIGURATOR_TYPE'
PP_THREAD_SAFE FUNCTION READ_GRIB2_LEVEL_CONFIGURATOR_TYPE( CFG, LEVEL_CONFIGURATOR_TYPE, HOOKS ) RESULT(RET)

  !> Symbols imported from other modules within the project.
  USE :: DATAKINDS_DEF_MOD,   ONLY: JPIB_K
  USE :: HOOKS_MOD,           ONLY: HOOKS_T
  USE :: YAML_CORE_UTILS_MOD, ONLY: YAML_CONFIGURATION_T
  USE :: YAML_CORE_UTILS_MOD, ONLY: YAML_CONFIGURATION_HAS_KEY
  USE :: YAML_CORE_UTILS_MOD, ONLY: YAML_READ_STRING
  USE :: YAML_CORE_UTILS_MOD, ONLY: STRING_IS_INTEGER
  USE :: YAML_CORE_UTILS_MOD, ONLY: STRING_TO_INTEGER

  ! Symbols imported by the preprocessor for debugging purposes
  PP_DEBUG_USE_VARS

  ! Symbols imported by the preprocessor for logging purposes
  PP_LOG_USE_VARS

  ! Symbols imported by the preprocessor for tracing purposes
  PP_TRACE_USE_VARS

IMPLICIT NONE

  ! Dummy arguments
  TYPE(YAML_CONFIGURATION_T), INTENT(IN)    :: CFG
  INTEGER(KIND=JPIB_K),       INTENT(OUT)   :: LEVEL_CONFIGURATOR_TYPE
  TYPE(HOOKS_T),              INTENT(INOUT) :: HOOKS

  ! Function result
  INTEGER(KIND=JPIB_K) :: RET

  ! Local variables
  INTEGER(KIND=JPIB_K) :: DEALLOC_STATUS
  CHARACTER(LEN=:), ALLOCATABLE :: ERRMSG
  CHARACTER(LEN=:), ALLOCATABLE :: CLEVEL_CONFIGURATOR_TYPE
  LOGICAL :: HAS_LEVEL_CONFIGURATOR
  LOGICAL :: LEVEL_CONFIGURATOR_IS_INTEGER

   ! Local error codes
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_NOT_ALLOCATED_AFTER_READ=1_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_DEALLOCATION_ERROR=2_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_KEY_NOT_PRESENT=3_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_KEY_IS_NOT_INTEGER=4_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_UNABLE_TO_READ_KEY=5_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_READ_ERROR=6_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_STRING_IS_INTEGER=7_JPIB_K
  INTEGER(KIND=JPIB_K), PARAMETER :: ERRFLAG_STRING_TO_INTEGER=8_JPIB_K


  ! Local variables declared by the preprocessor for debugging purposes
  PP_DEBUG_DECL_VARS

  ! Local variables declared by the preprocessor for logging purposes
  PP_LOG_DECL_VARS

  ! Local variables declared by the preprocessor for tracing purposes
  PP_TRACE_DECL_VARS

  ! Trace begin of procedure
  PP_TRACE_ENTER_PROCEDURE()

  ! Initialization of good path return value
  PP_SET_ERR_SUCCESS( RET )

  ! Initialization
  LEVEL_CONFIGURATOR_TYPE = -1_JPIB_K

  !> Check if configuration has the LEVEL_CONFIGURATOR key
  PP_TRYCALL(ERRFLAG_UNABLE_TO_READ_KEY) YAML_CONFIGURATION_HAS_KEY( CFG, LEVEL_CONFIGURATOR_KEY, HAS_LEVEL_CONFIGURATOR, HOOKS )

  !> Read the LEVEL_CONFIGURATOR template number
  IF ( HAS_LEVEL_CONFIGURATOR ) THEN
    PP_TRYCALL(ERRFLAG_READ_ERROR) YAML_READ_STRING( CFG, LEVEL_CONFIGURATOR_KEY, CLEVEL_CONFIGURATOR_TYPE, HOOKS )
    PP_DEBUG_CRITICAL_COND_THROW( .NOT.ALLOCATED(CLEVEL_CONFIGURATOR_TYPE), ERRFLAG_NOT_ALLOCATED_AFTER_READ )
    PP_TRYCALL( ERRFLAG_STRING_IS_INTEGER ) STRING_IS_INTEGER( CLEVEL_CONFIGURATOR_TYPE, LEVEL_CONFIGURATOR_IS_INTEGER, HOOKS )
    IF ( LEVEL_CONFIGURATOR_IS_INTEGER ) THEN
       PP_TRYCALL( ERRFLAG_STRING_TO_INTEGER ) STRING_TO_INTEGER( CLEVEL_CONFIGURATOR_TYPE, LEVEL_CONFIGURATOR_TYPE, HOOKS )
    ELSE
      SELECT CASE (CLEVEL_CONFIGURATOR_TYPE)
      CASE ('surface')
        LEVEL_CONFIGURATOR_TYPE = 0_JPIB_K
      CASE ('entireAtmosphere')
        LEVEL_CONFIGURATOR_TYPE = 1_JPIB_K
      CASE ('entireOcean')
        LEVEL_CONFIGURATOR_TYPE = 2_JPIB_K
      CASE ('entireLake')
        LEVEL_CONFIGURATOR_TYPE = 3_JPIB_K
      CASE ('cloudBase')
        LEVEL_CONFIGURATOR_TYPE = 4_JPIB_K
      CASE ('cloudTop')
        LEVEL_CONFIGURATOR_TYPE = 5_JPIB_K
      CASE ('isothermZero')
        LEVEL_CONFIGURATOR_TYPE = 6_JPIB_K
      CASE ('adiabaticCondensation')
        LEVEL_CONFIGURATOR_TYPE = 7_JPIB_K
      CASE ('maxWind')
        LEVEL_CONFIGURATOR_TYPE = 8_JPIB_K
      CASE ('tropopause')
        LEVEL_CONFIGURATOR_TYPE = 9_JPIB_K
      CASE ('nominalTop')
        LEVEL_CONFIGURATOR_TYPE = 10_JPIB_K
      CASE ('seaBottom')
        LEVEL_CONFIGURATOR_TYPE = 11_JPIB_K
      CASE ('atmosphere')
        LEVEL_CONFIGURATOR_TYPE = 12_JPIB_K
      CASE ('cumulonimbusBase')
        LEVEL_CONFIGURATOR_TYPE = 13_JPIB_K
      CASE ('cumulonimbusTop')
        LEVEL_CONFIGURATOR_TYPE = 14_JPIB_K
      CASE ('freeConvection')
        LEVEL_CONFIGURATOR_TYPE = 15_JPIB_K
      CASE ('convectiveCondensation')
        LEVEL_CONFIGURATOR_TYPE = 16_JPIB_K
      CASE ('neutralBuoyancy')
        LEVEL_CONFIGURATOR_TYPE = 17_JPIB_K
      CASE ('mostUnstableParcel')
        LEVEL_CONFIGURATOR_TYPE = 18_JPIB_K
      CASE ('mixedLayerParcel')
        LEVEL_CONFIGURATOR_TYPE = 19_JPIB_K
      CASE ('isothermal')
        LEVEL_CONFIGURATOR_TYPE = 20_JPIB_K
      CASE ('isobaricInPa')
        LEVEL_CONFIGURATOR_TYPE = 21_JPIB_K
      CASE ('isobaricInhPa')
        LEVEL_CONFIGURATOR_TYPE = 22_JPIB_K
      CASE ('isobaricLayer')
        LEVEL_CONFIGURATOR_TYPE = 23_JPIB_K
      CASE ('lowCloudLayer')
        LEVEL_CONFIGURATOR_TYPE = 24_JPIB_K
      CASE ('mediumCloudLayer')
        LEVEL_CONFIGURATOR_TYPE = 25_JPIB_K
      CASE ('highCloudLayer')
        LEVEL_CONFIGURATOR_TYPE = 26_JPIB_K
      CASE ('meanSea')
        LEVEL_CONFIGURATOR_TYPE = 27_JPIB_K
      CASE ('heightAboveSea')
        LEVEL_CONFIGURATOR_TYPE = 28_JPIB_K
      CASE ('heightAboveSeaLayer')
        LEVEL_CONFIGURATOR_TYPE = 29_JPIB_K
      CASE ('heightAboveGround')
        LEVEL_CONFIGURATOR_TYPE = 30_JPIB_K
      CASE ('heightAboveGroundLayer')
        LEVEL_CONFIGURATOR_TYPE = 31_JPIB_K
      CASE ('sigma')
        LEVEL_CONFIGURATOR_TYPE = 32_JPIB_K
      CASE ('sigmaLayer')
        LEVEL_CONFIGURATOR_TYPE = 33_JPIB_K
      CASE ('hybrid')
        LEVEL_CONFIGURATOR_TYPE = 34_JPIB_K
      CASE ('hybridLayer')
        LEVEL_CONFIGURATOR_TYPE = 35_JPIB_K
      CASE ('depthBelowLand')
        LEVEL_CONFIGURATOR_TYPE = 36_JPIB_K
      CASE ('depthBelowLandLayer')
        LEVEL_CONFIGURATOR_TYPE = 37_JPIB_K
      CASE ('theta')
        LEVEL_CONFIGURATOR_TYPE = 38_JPIB_K
      CASE ('thetaLayer')
        LEVEL_CONFIGURATOR_TYPE = 39_JPIB_K
      CASE ('pressureFromGround')
        LEVEL_CONFIGURATOR_TYPE = 40_JPIB_K
      CASE ('pressureFromGroundLayer')
        LEVEL_CONFIGURATOR_TYPE = 41_JPIB_K
      CASE ('potentialVorticity')
        LEVEL_CONFIGURATOR_TYPE = 42_JPIB_K
      CASE ('eta')
        LEVEL_CONFIGURATOR_TYPE = 43_JPIB_K
      CASE ('snow')
        LEVEL_CONFIGURATOR_TYPE = 44_JPIB_K
      CASE ('snowLayer')
        LEVEL_CONFIGURATOR_TYPE = 45_JPIB_K
      CASE ('mixedLayerDepthGeneric')
        LEVEL_CONFIGURATOR_TYPE = 46_JPIB_K
      CASE ('hybridHeight')
        LEVEL_CONFIGURATOR_TYPE = 47_JPIB_K
      CASE ('hybridPressure')
        LEVEL_CONFIGURATOR_TYPE = 48_JPIB_K
      CASE ('generalVertical')
        LEVEL_CONFIGURATOR_TYPE = 49_JPIB_K
      CASE ('generalVerticalLayer')
        LEVEL_CONFIGURATOR_TYPE = 50_JPIB_K
      CASE ('soil')
        LEVEL_CONFIGURATOR_TYPE = 51_JPIB_K
      CASE ('soilLayer')
        LEVEL_CONFIGURATOR_TYPE = 52_JPIB_K
      CASE ('seaIce')
        LEVEL_CONFIGURATOR_TYPE = 53_JPIB_K
      CASE ('seaIceLayer')
        LEVEL_CONFIGURATOR_TYPE = 54_JPIB_K
      CASE ('depthBelowSea')
        LEVEL_CONFIGURATOR_TYPE = 55_JPIB_K
      CASE ('oceanSurface')
        LEVEL_CONFIGURATOR_TYPE = 56_JPIB_K
      CASE ('depthBelowSeaLayer')
        LEVEL_CONFIGURATOR_TYPE = 57_JPIB_K
      CASE ('oceanSurfaceToBottom')
        LEVEL_CONFIGURATOR_TYPE = 58_JPIB_K
      CASE ('lakeBottom')
        LEVEL_CONFIGURATOR_TYPE = 59_JPIB_K
      CASE ('mixingLayer')
        LEVEL_CONFIGURATOR_TYPE = 60_JPIB_K
      CASE ('oceanModel')
        LEVEL_CONFIGURATOR_TYPE = 61_JPIB_K
      CASE ('oceanModelLayer')
        LEVEL_CONFIGURATOR_TYPE = 62_JPIB_K
      CASE ('mixedLayerDepthByDensity')
        LEVEL_CONFIGURATOR_TYPE = 63_JPIB_K
      CASE ('mixedLayerDepthByTemperature')
        LEVEL_CONFIGURATOR_TYPE = 64_JPIB_K
      CASE ('mixedLayerDepthByDiffusivity')
        LEVEL_CONFIGURATOR_TYPE = 65_JPIB_K
      CASE ('snowTopOverIceOnWater')
        LEVEL_CONFIGURATOR_TYPE = 66_JPIB_K
      CASE ('snowLayerOverIceOnWater')
        LEVEL_CONFIGURATOR_TYPE = 67_JPIB_K
      CASE ('iceTopOnWater')
        LEVEL_CONFIGURATOR_TYPE = 68_JPIB_K
      CASE ('iceLayerOnWater')
        LEVEL_CONFIGURATOR_TYPE = 69_JPIB_K
      CASE ('iceTopUnderSnowOnWater')
        LEVEL_CONFIGURATOR_TYPE = 70_JPIB_K
      CASE ('iceLayerUnderSnowOnWater')
        LEVEL_CONFIGURATOR_TYPE = 71_JPIB_K
      CASE ('iceBottomOnWater')
        LEVEL_CONFIGURATOR_TYPE = 72_JPIB_K
      CASE ('indefiniteSoilDepth')
        LEVEL_CONFIGURATOR_TYPE = 73_JPIB_K
      CASE ('meltPondTop')
        LEVEL_CONFIGURATOR_TYPE = 74_JPIB_K
      CASE ('meltPondBottom')
        LEVEL_CONFIGURATOR_TYPE = 75_JPIB_K
      CASE ('entireMeltPond')
        LEVEL_CONFIGURATOR_TYPE = 76_JPIB_K
      CASE ('iceLayerAboveWaterSurface')
        LEVEL_CONFIGURATOR_TYPE = 77_JPIB_K
      CASE ('waterSurfaceToIsothermalOceanLayer')
        LEVEL_CONFIGURATOR_TYPE = 78_JPIB_K
      CASE ('totalSoilLayer')
        LEVEL_CONFIGURATOR_TYPE = 79_JPIB_K
      CASE ('rootZone')
        LEVEL_CONFIGURATOR_TYPE = 80_JPIB_K
      CASE ('roof')
        LEVEL_CONFIGURATOR_TYPE = 81_JPIB_K
      CASE ('roofLayer')
        LEVEL_CONFIGURATOR_TYPE = 82_JPIB_K
      CASE ('wall')
        LEVEL_CONFIGURATOR_TYPE = 83_JPIB_K
      CASE ('wallLayer')
        LEVEL_CONFIGURATOR_TYPE = 84_JPIB_K
      CASE ('road')
        LEVEL_CONFIGURATOR_TYPE = 85_JPIB_K
      CASE ('roadLayer')
        LEVEL_CONFIGURATOR_TYPE = 86_JPIB_K
      CASE ('urbanCanyon')
        LEVEL_CONFIGURATOR_TYPE = 87_JPIB_K
      CASE ('custom')
        LEVEL_CONFIGURATOR_TYPE = 999_JPIB_K
      CASE DEFAULT
        PP_DEBUG_CRITICAL_THROW( ERRFLAG_KEY_IS_NOT_INTEGER )
      END SELECT
    ENDIF
    DEALLOCATE(CLEVEL_CONFIGURATOR_TYPE, STAT=DEALLOC_STATUS, ERRMSG=ERRMSG)
    PP_DEBUG_CRITICAL_COND_THROW( DEALLOC_STATUS.NE.0, ERRFLAG_DEALLOCATION_ERROR )
  ELSE
    ! TODO
    PP_DEBUG_CRITICAL_THROW( ERRFLAG_KEY_NOT_PRESENT )
  ENDIF

  ! Trace end of procedure (on success)
  PP_TRACE_EXIT_PROCEDURE_ON_SUCCESS()

  ! Exit point (on success)
  RETURN

! Error handler
PP_ERROR_HANDLER

  ! Initialization of bad path return value
  PP_SET_ERR_FAILURE( RET )

#if defined( PP_DEBUG_ENABLE_ERROR_HANDLING )
!$omp critical(ERROR_HANDLER)

  BLOCK

    ! Error handling variables
    CHARACTER(LEN=:), ALLOCATABLE :: STR

    ! Handle different errors
    SELECT CASE(ERRIDX)
    CASE (ERRFLAG_NOT_ALLOCATED_AFTER_READ)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'LEVEL_CONFIGURATOR ctype not allocated after reading' )
    CASE (ERRFLAG_DEALLOCATION_ERROR)
      IF ( .NOT.ALLOCATED(ERRMSG) ) THEN
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error deallocating LEVEL_CONFIGURATOR number' )
      ELSE
        PP_DEBUG_CREATE_ERROR_MSG( STR, 'error deallocating LEVEL_CONFIGURATOR number: '//TRIM(ADJUSTL(ERRMSG)) )
        DEALLOCATE(ERRMSG)
      ENDIF
    CASE (ERRFLAG_KEY_NOT_PRESENT)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Key is not present' )
    CASE (ERRFLAG_KEY_IS_NOT_INTEGER)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Key is not integer' )

    CASE (ERRFLAG_UNABLE_TO_READ_KEY)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Error calling check key' )
    CASE (ERRFLAG_READ_ERROR)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Error reading key' )
    CASE (ERRFLAG_STRING_IS_INTEGER)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Error in checking if string is an integer' )
    CASE (ERRFLAG_STRING_TO_INTEGER)
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'Error in converting string to integer' )
    CASE DEFAULT
      PP_DEBUG_CREATE_ERROR_MSG( STR, 'unhandled error' )
    END SELECT

    ! Trace end of procedure (on error)
    PP_TRACE_EXIT_PROCEDURE_ON_ERROR()

    ! Write the error message and stop the program
    PP_DEBUG_ABORT( STR )

  END BLOCK

!$omp end critical(ERROR_HANDLER)
#endif

  ! Exit point (on error)
  RETURN

END FUNCTION READ_GRIB2_LEVEL_CONFIGURATOR_TYPE
#undef PP_PROCEDURE_NAME
#undef PP_PROCEDURE_TYPE

END MODULE GRIB2_LEVEL_CONFIGURATOR_FACTORY_MOD
#undef PP_SECTION_NAME
#undef PP_SECTION_TYPE
#undef PP_FILE_NAME
