MODULE FILTER_COMPOSED_MOD
IMPLICIT NONE

INTEGER(KIND=JPIB_K), PARAMETER :: ALL_E=0_JPIB_K
INTEGER(KIND=JPIB_K), PARAMETER :: ANY_E=1_JPIB_K
INTEGER(KIND=JPIB_K), PARAMETER :: NONE_E=2_JPIB_K
INTEGER(KIND=JPIB_K), PARAMETER :: ONE_E=3_JPIB_K




TYPE, EXTENDS(FILTER_BASE_A) :: FILTER_COMPOSED_T

   PRIVATE

   !> ALL, ANY, NONE, ONE
   INTEGER(KIND=JPIB_K) :: OPERATIONN_TYPE_

   TYPE(FILTER_CONTAINER_T), POINTER, DIMENSION(:) :: FILTERS_ => NULL()

CONTAINS


  PROCEDURE, NON_OVERRIDABLE, PUBLIC, PASS :: COMPOPSE

  PROCEDURE, NON_OVERRIDABLE, PUBLIC, PASS :: INIT
  PROCEDURE, NON_OVERRIDABLE, PUBLIC, PASS :: MATCH
  PROCEDURE, NON_OVERRIDABLE, PUBLIC, PASS :: FREE

END TYPE


CONTAINS


FUNCTION FILTER_COMPOSED_MATCH( THIS, MSG, PAR, MATCH, HOOKS ) RESULT(RET)
IMPLICIT NONE

  CLASS(FILTER_COMPOSED_T), INTENT(IN)  :: THIS
  TYPE(PARAMETRIZATION_T),  INTENT(IN)  :: MSG
  TYPE(FORTRAN_MESSAGE_T),  INTENT(IN)  :: PAR
  LOGICAL,                  INTENT(OUT) :: MATCH
  TYPE(HOOKS_T),            INTENT(IN)  :: HOOKS

  INTEGER(KIND=JPIB_K) :: RET

  DO I = 1, SIZE(FILTERS_)
    CONDITIONS(I) = FILTERS_(I)%MATCH(MSG,PAR,CURR_TIME,TIME_HISTORY)
  ENDDO

  RET = COMPOSE( CONDITIONS, MATCH, HOOKS )

END FUNCTION FILTER_COMPOSED_MATCH

FUNCTION FILTER_COMPOSED_FREE( THIS, HOOKS ) RESULT(RET)
IMPLICIT NONE

  CLASS(FILTER_COMPOSED_T), INTENT(IN)  :: THIS
  TYPE(PARAMETRIZATION_T),  INTENT(IN)  :: MSG
  TYPE(FORTRAN_MESSAGE_T),  INTENT(IN)  :: PAR
  LOGICAL,                  INTENT(OUT) :: MATCH
  TYPE(HOOKS_T),            INTENT(IN)  :: HOOKS

  INTEGER(KIND=JPIB_K) :: RET

  DO I = 1, SIZE(FILTERS_)
    RET = FILTERS_(I)%FREE( HOOKS )
  ENDDO

  RET = COMPOSE( CONDITIONS, MATCH, HOOKS )

END FUNCTION FILTER_COMPOSED_FREE


FUNCTION FILTER_COMPOSED_COMPOSE( CONDITIONS, MATCH, HOOKS ) RESULT(RET)
IMPLICIT NONE

  CLASS(FILTER_COMPOSED_T), INTENT(IN)  :: THIS
  LOGICAL, DIMENSION(:),    INTENT(IN)  :: CONDITIONS
  LOGICAL,                  INTENT(OUT) :: MATCH
  TYPE(HOOKS_T),            INTENT(IN)  :: HOOKS

  INTEGER(KIND=JPIM_K) :: RET

  N = SIZE(CONDITIONS)
  CNT = 0
  DO I = 1, N
    IF( CONDITIONS(I) ) THEN
      CNT = CNT + 1
    END IF
  ENDDO

  SELECT CASE( THIS%OPERATIONN_TYPE_ )

  CASE( ALL_E )

    MATCH = (CNT .EQ. N)

  CASE( ANY_E )

    MATCH = (CNT .GT. 0)

  CASE( NONE_E )

    MATCH = (CNT .EQ. 0)

  CASE( ONE_E )

    MATCH = (CNT .EQ. 1)

  CASE DEFAULT

    PP_DEBUG_CRITICAL_THROW( 1 )

  END SELECT

  RETURN

END FUNCTION FILTER_COMPOSED_COMPOSE


END MODULE FILTER_COMPOSED_MOD