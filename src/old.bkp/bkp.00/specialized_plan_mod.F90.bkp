! Include preprocessor utils
#include "output_manager_preprocessor_utils.h"
#include "output_manager_preprocessor_trace_utils.h"
#include "output_manager_preprocessor_logging_utils.h"
#include "output_manager_preprocessor_errhdl_utils.h"


#define PP_FILE_NAME 'specialized_plan_mod.F90'
#define PP_SECTION_TYPE 'MODULE'
#define PP_SECTION_NAME 'SPECIALIZED_PLAN_MOD'
MODULE SPECIALIZED_PLAN_MOD
IMPLICIT NONE

PRIVATE

!> A plan that has been already matched and needs to be added to the encoding info
TYPE :: SPECIALIZED_PLAN_CONTAINER_T
  CLASS(SPECIALIZED_PLAN_T), POINTER :: SPLAN_ => NULL()
END TYPE


!> A plan that has been already matched and needs to be added to the encoding info
!> For a specific message
TYPE :: SPECIALIZED_PLAN_T

  !> Default visibility of the class
  PRIVATE

  !> Track the last time a message arrived
  CLASS(TIME_HISTORY_T), POINTER :: TIME_HIST_ => NULL()

  !> Metadata of the partially encoded grib message
  CLASS(METADATA_BASE_A), POINTER :: METADATA_ => NULL()

  !> Set of mappings used to remap the data before encoding
  CLASS(MAPPING_BASE_T), POINTER :: MAPPING_ => NULL()

  !> Set of actions used to encode a GRIB message
  CLASS(RUNTIME_ENCODER_BASE_T), POINTER :: RUNTIME_ENCODER_ => NULL()

  !> Action used to set the values in the GRIB message
  CLASS(VALUES_ENCODER_T), POINTER :: VALUES_RUNTIME_ENCODER_ => NULL()

  !> Set of sinks used to store the encoded data
  CLASS(SINK_BASE_T), POINTER, DIMENSION(:) :: SINK_ => NULL()

CONTAINS

  !> Initialize the specialized plan from the original plan
  PROCEDURE, PUBLIC, PASS :: INIT => SPECIALIZED_PLAN_INIT

  !> Check if the current message needs to be encoded
  PROCEDURE, PUBLIC, PASS :: TO_BE_ENCODED => SPECIALIZED_PLAN_TO_BE_ENCODED

  !> Encode the message (finalize the metadata encoding and set the values)
  PROCEDURE, PUBLIC, PASS :: ENCODE => SPECIALIZED_PLAN_ENCODE

  !> Write all the encoded data with the sinks
  PROCEDURE, PUBLIC, PASS :: SINK => SPECIALIZED_PLAN_SINK

  !> Free all the memory allocated by the plan
  PROCEDURE, PUBLIC, PASS :: FREE => SPECIALIZED_PLAN_FREE

END TYPE


PUBLIC :: SPECIALIZED_PLAN_T

CONTAINS


SUBROUTINE SPECIALIZED_PLAN_INIT( THIS, TIME_HISTORY, METADATA, MAPPING, RUNTIME_ENCODER, VALUES_RUNTIME_ENCODER, SINKS, VERBOSE )
IMPLICIT NONE
  TYPE(SPECIALIZED_PLAN_T), INTENT(INOUT) :: THIS
  CLASS(TIME_HISTORY_T), POINTER, INTENT(IN) :: TIME_HISTORY
  CLASS(METADATA_BASE_A), POINTER, INTENT(IN) :: METADATA
  CLASS(MAPPING_BASE_T), POINTER, INTENT(IN) :: MAPPING
  CLASS(RUNTIME_ENCODER_BASE_T), POINTER, INTENT(IN) :: RUNTIME_ENCODER
  CLASS(VALUES_ENCODER_T), POINTER, INTENT(IN) :: VALUES_RUNTIME_ENCODER
  CLASS(SINK_BASE_T), POINTER, DIMENSION(:), INTENT(IN) :: SINKS
  LOGICAL, INTENT(IN) :: VERBOSE

  THIS%TIME_HIST_ => TIME_HISTORY
  THIS%METADATA_ => METADATA
  THIS%MAPPING_ => MAPPING
  THIS%RUNTIME_ENCODER_ => RUNTIME_ENCODER
  THIS%VALUES_RUNTIME_ENCODER_ => VALUES_RUNTIME_ENCODER
  THIS%SINKS_ => SINKS

  RETURN

END SUBROUTINE SPECIALIZED_PLAN_INIT


SUBROUTINE SPECIALIZED_PLAN_TO_BE_ENCODED( THIS, PARAMS, MSG, CURR_TIME, TO_BE_ENCODED, VERBOSE )
IMPLICIT NONE
  TYPE(SPECIALIZED_PLAN_T), INTENT(INOUT) :: THIS
  TYPE(PARAMS_T),           INTENT(IN)    :: PARAMS
  TYPE(MESSAGE_T),          INTENT(IN)    :: MSG
  TYPE(CURRENT_TIME_T),     INTENT(IN)    :: CURR_TIME
  LOGICAL,                  INTENT(OUT)   :: TO_BE_ENCODED
  LOGICAL,                  INTENT(IN)    :: VERBOSE

  ! Local variables
  TYPE(MESSAGE_T) :: MAPPED_MSG

  CALL THIS%MAPPING_%APPLY(PARAMS, MSG, MAPPED_MSG, VERBOSE)

  CALL THIS%RUNTIME_ENCODER_%TO_BE_ENCODED(PARAMS, MAPPED_MSG, CURR_TIME, THIS%TIME_HIST_, TO_BE_ENCODED, VERBOSE)

  RETURN

END SUBROUTINE SPECIALIZED_PLAN_TO_BE_ENCODED


SUBROUTINE SPECIALIZED_PLAN_ENCODE( THIS, PARAMS, MSG, CURR_TIME, METADATA, VALUES, VERBOSE )
IMPLICIT NONE
  TYPE(SPECIALIZED_PLAN_T), INTENT(INOUT) :: THIS
  TYPE(PARAMS_T),           INTENT(IN)    :: PARAMS
  TYPE(MESSAGE_T),          INTENT(IN)    :: MSG
  TYPE(CURRENT_TIME_T),     INTENT(IN)    :: CURR_TIME
  LOGICAL,                  INTENT(OUT)   :: TO_BE_ENCODED
  LOGICAL,                  INTENT(IN)    :: VERBOSE

  ! Local variables
  TYPE(MESSAGE_T) :: MAPPED_MSG

  CALL THIS%MAPPING_%APPLY(PARAMS, MSG, MAPPED_MSG, VERBOSE)

  CALL THIS%RUNTIME_ENCODER_%ENCODE( PARAMS, MAPPED_MSG, CURR_TIME, THIS%TIME_HIST_, METADATA, VERBOSE)

  CALL THIS%VALUES_RUNTIME_ENCODER_%ENCODE( PARAMS, MAPPED_MSG, METADATA, VERBOSE)

  RETURN

END SUBROUTINE SPECIALIZED_PLAN_ENCODE


SUBROUTINE SPECIALIZED_PLAN_SINK( THIS, METADATA, VERBOSE )
IMPLICIT NONE
  TYPE(SPECIALIZED_PLAN_T), INTENT(INOUT) :: THIS
  TYPE(PARAMS_T),           INTENT(IN)    :: PARAMS
  TYPE(MESSAGE_T),          INTENT(IN)    :: MSG
  TYPE(CURRENT_TIME_T),     INTENT(IN)    :: CURR_TIME
  LOGICAL,                  INTENT(OUT)   :: TO_BE_ENCODED
  LOGICAL,                  INTENT(IN)    :: VERBOSE

  ! Local variables
  TYPE(MESSAGE_T) :: MAPPED_MSG
  INTEGER(KIND-JPIB_K) :: I

  DO I = 1, SIZE(THIS%SINKS_)
    CALL THIS%SINKS_(I)%WRITE( THIS%METADATA_, VERBOSE )
  END DO

  RETURN

END SUBROUTINE SPECIALIZED_PLAN_SINK


SUBROUTINE SPECIALIZED_PLAN_FREE( THIS, VERBOSE )
IMPLICIT NONE
  TYPE(SPECIALIZED_PLAN_T), INTENT(INOUT) :: THIS
  CLASS(TIME_HISTORY_T), POINTER, INTENT(IN) :: TIME_HISTORY
  CLASS(METADATA_BASE_A), POINTER, INTENT(IN) :: METADATA
  CLASS(MAPPING_BASE_T), POINTER, INTENT(IN) :: MAPPING
  CLASS(RUNTIME_ENCODER_BASE_T), POINTER, INTENT(IN) :: RUNTIME_ENCODER
  CLASS(VALUES_ENCODER_T), POINTER, INTENT(IN) :: VALUES_RUNTIME_ENCODER
  CLASS(SINK_BASE_T), POINTER, DIMENSION(:), INTENT(IN) :: SINKS

  THIS%TIME_HIST_ => NULL()
  THIS%METADATA_ => NULL()
  THIS%MAPPING_ => NULL()
  THIS%RUNTIME_ENCODER_ => NULL()
  THIS%VALUES_RUNTIME_ENCODER_ => NULL()
  THIS%SINKS_ => NULL()

  RETURN

END SUBROUTINE SPECIALIZED_PLAN_FREE

END MODULE SPECIALIZED_PLAN_MOD
#undef PP_SECTION_NAME
#undef PP_SECTION_TYPE
#undef PP_FILE_NAME