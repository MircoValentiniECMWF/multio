MODULE FILTER_BASE_MOD
IMPLICIT NONE

TYPE, ABSTRACT :: FILTER_BASE_A
CONTAINS

  PROCEDURE(FILTER_INIT_IF),  DEFERRED, PUBLIC, PASS :: INIT
  PROCEDURE(FILTER_MATCH_IF), DEFERRED, PUBLIC, PASS :: MATCH
  PROCEDURE(FILTER_FREE_IF),  DEFERRED, PUBLIC, PASS :: FREE

END TYPE


TYPE :: FILTER_CONTAINER_T

  CLASS(FILTER_BASE_A), POINTER :: FILTER_ => NULL()

END TYPE


ABSTRACT INTERFACE

FUNCTION FILTER_INIT_IF( THIS, OPT, HOOKS ) RESULT( RET )

  IMPORT :: FILTER_BASE_A

IMPLICIT NONE

  CLASS(FILTER_BASE_A),   INTENT(INOUT) :: THIS
  TYPE(FILTER_OPTIONS_T), INTENT(IN)    :: OPT
  TYPE(HOOKS_T),          INTENT(IN)    :: HOOKS

  INTEGER(KIND=JPIB_K) :: RET

END FUNCTION FILTER_INIT_IF

FUNCTION FILTER_MATCH_IF( THIS, MSG, PAR, MATCH, HOOKS ) RESULT(RET)

  IMPORT :: FILTER_BASE_A

IMPLICIT NONE

  CLASS(FILTER_BASE_A),    INTENT(IN)  :: THIS
  TYPE(PARAMETRIZATION_T), INTENT(IN)  :: MSG
  TYPE(FORTRAN_MESSAGE_T), INTENT(IN)  :: PAR
  LOGICAL,                 INTENT(OUT) :: MATCH
  TYPE(HOOKS_T),           INTENT(IN)  :: HOOKS

  INTEGER(KIND=JPIB_K) :: RET

END FUNCTION FILTER_MATCH_IF

FUNCTION FILTER_FREE_IF( THIS, HOOKS ) RESULT( RET )

  IMPORT :: FILTER_BASE_A

IMPLICIT NONE

  CLASS(FILTER_BASE_A), INTENT(INOUT) :: THIS
  TYPE(HOOKS_T),        INTENT(IN)    :: HOOKS

  INTEGER(KIND=JPIB_K) :: RET

END FUNCTION FILTER_FREE_IF

END INTERFACE

CONTAINS



END MODULE FILTER_BASE_MOD
